openapi: 3.0.0
info:
  version: '1.0.0'
  title: 'ShareMyTutoring.com API'
  description: 'The API for ShareMyTutoring.com'

servers:
  - description: V1 Creation
    url: https://sharemytutoring.com/api/v1

tags:
  - name: User Details
    description: Maintaining user details (CRUD).
  - name: User Login
    description: Handles users login in to the application. 
  - name: User Contact Details
    description: Maintains the users contact details.
  - name: User Media Verification
    description: Allows the user to verify the email or mobile number they are using.
  - name: User Reset Password
    description: Allows the user to reset their passord and not needing to login.
  - name: User Email Usernames
    description: Allows a client to get all the usernames associated to an email address emailed to the email addrerss.
  - name: Static Data - Subjects
    description: Handles retrieving the subjects and subject categories. 

paths:

  /user:
    summary: Represents a user
    description: The login details for any user (student / tutor or parent).
    
    post:
      summary: Creates a user account.
      description: Creates a user account.
      tags:
        - User Details
      operationId: createUser
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: 'Dave123'
                email:
                  type: string
                  example: 'dave@hello.co.uk'
                password:
                  type: string
                  example: 'Hello123!'
                password2:
                  type: string
                  example: 'Hello123!'
                type:
                  type: integer
                  enum: [1,2,3]
                  example: '1'
      responses:
        '200':
          description: User account already exists but unvalidated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: 
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjozLCJpYXQiOjE1ODIxOTI5MzUsImV4cCI6MTU4MjU1MjkzNX0.QBs8ViRCqU4fCyngfbaAuegbhUU8I-E3lcBHr2Q1UOc"
        '201':
          description: User account created.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: 
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjozLCJpYXQiOjE1ODIxOTI5MzUsImV4cCI6MTU4MjU1MjkzNX0.QBs8ViRCqU4fCyngfbaAuegbhUU8I-E3lcBHr2Q1UOc"
        '409':
          description: Username is already being used.
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorMsg: 
                    type: object
                    properties:
                      username:
                        type: string
                        example: Username already exists.

        '422':
          description: User details validation issues.
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorMsg: 
                    type: object
                    properties:
                      username:
                        type: string
                        example: Username has to be 6 - 30 characters and can contain your email address.
                      email:
                        type: string
                        example: A valid email address needs to be entered.
                      password: 
                        type: string
                        example: Your password needs to be 6 - 20 characters long and must contain at least one number.
                      password2:
                        type: string
                        example: Your passwords must match.
                      type:
                        type: string
                        example: The user type must be between 1 and 3.
        '500':
          $ref: '#/components/responses/SystemError'

        '503':
          $ref: '#/components/responses/DatabaseConnectivityIssue'

      x-amazon-apigateway-request-validators:
        basic:
          validateRequestParameters: true

      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: POST
        uri: "arn:aws:apigateway:eu-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-2:216211142709:function:userAccountMaintenanceTest/invocations"
        passThroughBehaviour: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        responses:
          default:
            statusCode: 200

    put:
      summary: Updates a users account
      description: Updates a users login details
      tags:
        - User Details
      operationId: updateUser
      
      x-amazon-apigateway-request-validators:
        basic:
          validateRequestParameters: true

      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: POST
        uri: "arn:aws:apigateway:eu-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-2:216211142709:function:userAccountMaintenanceTest/invocations"
        passThroughBehaviour: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        responses:
          default:
            statusCode: 200

      parameters:
        - name: X-Auth-Token
          in: header
          description: JWT for the client id
          required: true
          schema:
            type: string

      requestBody:
        required: true
        content: 
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: 'Dave123'
                email:
                  type: string
                  example: 'dave@hello.co.uk'
                password:
                  type: string
                  example: 'Hello123!'
                password2:
                  type: string
                  example: 'Hello123!'
                type:
                  type: integer
                  enum: [1,2,3]
                  example: '1'
      responses:
        '200':
          description: User account already exists but unvalidated.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: 
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjozLCJpYXQiOjE1ODIxOTI5MzUsImV4cCI6MTU4MjU1MjkzNX0.QBs8ViRCqU4fCyngfbaAuegbhUU8I-E3lcBHr2Q1UOc"
        '201':
          description: User account created.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: 
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjozLCJpYXQiOjE1ODIxOTI5MzUsImV4cCI6MTU4MjU1MjkzNX0.QBs8ViRCqU4fCyngfbaAuegbhUU8I-E3lcBHr2Q1UOc"
        '409':
          description: Username is already being used.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorMsg: 
                    type: object
                    properties:
                      username:
                        type: string
                        example: Username already exists.

        '422':
          description: User details validation issues.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorMsg: 
                    type: object
                    properties:
                      username:
                        type: string
                        example: Username has to be 6 - 30 characters and can contain your email address.
                      email:
                        type: string
                        example: A valid email address needs to be entered.
                      password: 
                        type: string
                        example: Your password needs to be 6 - 20 characters long and must contain at least one number.
                      password2:
                        type: string
                        example: Your passwords must match.
                      type:
                        type: string
                        example: The user type must be between 1 and 3.
        '500':
          $ref: '#/components/responses/SystemError'

        '503':
          $ref: '#/components/responses/DatabaseConnectivityIssue'

    get:
      summary: Retrieves a users login details
      description: Returns the user details for the JWT token passed in.
      tags:
        - User Details
      operationId: getUser

      x-amazon-apigateway-request-validators:
        basic:
          validateRequestParameters: true

      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: POST
        uri: "arn:aws:apigateway:eu-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-2:216211142709:function:userAccountMaintenanceTest/invocations"
        passThroughBehaviour: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        responses:
          default:
            statusCode: 200

      parameters:
        - name: X-Auth-Token
          in: header
          description: JWT for the client id
          required: true
          schema:
            type: string

      responses:
        '200':
          description: Successfully found and returned the specified user.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  rows:
                    type: integer
                    example: 1
                  user:
                    type: array
                    items:
                      type: object
                      properties:
                        user_id:
                          type: integer
                          example: 3
                        email:
                          type: string
                          example: debbie@microsoft.com
                        username:
                          type: string
                          example: Debbie01
                        password:
                          type: string
                          example: "$2a$10$52ZWTPsjAnT1lVfFtA94AeRRtOQtPn.qsLStaT7pur1WwADrOf1KW"
                        validate:
                          type: string
                          example: N

        '401':
          $ref: '#/components/responses/UserNotSignedIn'
        '404':
          $ref: '#/components/responses/UserAccountDoesNotExist'
        '500':
          $ref: '#/components/responses/SystemError'
        '503':
          $ref: '#/components/responses/DatabaseConnectivityIssue'

    delete:
      summary: Deletes a users login details
      description: Returns the user details for the JWT token passed in.
      tags:
        - User Details
      operationId: deleteUser

      x-amazon-apigateway-request-validators:
        basic:
          validateRequestParameters: true

      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: POST
        uri: "arn:aws:apigateway:eu-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-2:216211142709:function:userAccountMaintenanceTest/invocations"
        passThroughBehaviour: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        responses:
          default:
            statusCode: 200

      parameters:
        - name: X-Auth-Token
          in: header
          description: JWT for the client id
          required: true
          schema:
            type: string

      responses:
        '201':
          description: User account deleted.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg: 
                    type: string
                    example: "Account deleted."
        '401':
          $ref: '#/components/responses/UserNotSignedIn'
        '404':
          $ref: '#/components/responses/UserAccountDoesNotExist'
        '500':
          $ref: '#/components/responses/SystemError'
        '503':
          $ref: '#/components/responses/DatabaseConnectivityIssue'

    options:

      summary: User options.
      description: User options.
      tags:
        - User Details
      operationId: optionUser

      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Auth-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"

  /user-auth:
    summary: Handles a user login in
    description: The login details for any user ( username and password ).
    post:
      summary: Authenticates a user login in.
      description: Tries to authenticate the user so they can access private routes.
      tags:
        - User Login
      operationId: userLogin

      x-amazon-apigateway-request-validators:
        basic:
          validateRequestParameters: true

      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: POST
        uri: "arn:aws:apigateway:eu-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-2:216211142709:function:userLoginTest/invocations"
        passThroughBehaviour: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        responses:
          default:
            statusCode: 200

      requestBody:
        required: true
        content: 
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: 'Dave123'
                password:
                  type: string
                  example: 'Hello123!'
      responses:
        '200':
          description: Logon into the appication with username and password.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: 
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjozLCJpYXQiOjE1ODIxOTI5MzUsImV4cCI6MTU4MjU1MjkzNX0.QBs8ViRCqU4fCyngfbaAuegbhUU8I-E3lcBHr2Q1UOc"
        '401':
          $ref: '#/components/responses/UserNotSignedIn'
        '404':
          $ref: '#/components/responses/UserAccountDoesNotExist'
        '422':
          description: User details validation issues.
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorMsg: 
                    type: object
                    properties:
                      username:
                        type: string
                        example: Username has to be 6 - 30 characters and can contain your email address.
                      password: 
                        type: string
                        example: Your password needs to be 6 - 20 characters long and must contain at least one number.
        '500':
          $ref: '#/components/responses/SystemError'
        '503':
          $ref: '#/components/responses/DatabaseConnectivityIssue'

  /subjects:
    summary: Subjects and subject categories
    description: Retrieves the subjects and subject categories/

    get:
      summary: Retrieves the subjects and subjects categories
      description: Retrieves the subjects and subjects categories
      tags:
        - Static Data - Subjects
      operationId: getSubjects

      x-amazon-apigateway-request-validators:
        basic:
          validateRequestParameters: true

      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: POST
        uri: "arn:aws:apigateway:eu-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-2:216211142709:function:staticDataSubjectsTest/invocations"
        passThroughBehaviour: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        responses:
          default:
            statusCode: 200

      responses:
        '200':
          description: Successfully found and returned the specified user.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  subjects_rows:
                    type: integer
                    example: 1
                  categories_rows:
                    type: integer
                    example: 1
                  subjects:
                    type: array
                    items:
                      type: object
                      properties:
                        subject_id:
                          type: integer
                          example: 3
                        subject_category_id:
                          type: integer
                          example: 1
                        subject:
                          type: string
                          example: Accounting
                        subject_category:
                          type: string
                          example: Academic
                  subjects_categories:
                    type: array
                    items:
                      type: object
                      properties:
                        subject_level_id:
                          type: integer
                          example: 3
                        subject_level:
                          type: string
                          example: GCSE
                        subject_category:
                          type: string
                          example: GCSE

        '404':
          $ref: '#/components/responses/StaticdataSubjectsDoesNotExist'
        '500':
          $ref: '#/components/responses/SystemError'
        '503':
          $ref: '#/components/responses/DatabaseConnectivityIssue'

    options:

      summary: User options.
      description: User options.
      tags:
        - Static Data - Subjects
      operationId: optionSubjects

      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Auth-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"

  /user-contact-details:
    summary: The users contact details, name, address and phone numbers
    description: This path handles the CRUD associated with the users contact details.
    
    post:
      summary: Creates the users contact details.
      description: Creates the users contact details.
      tags:
        - User Contact Details
      operationId: createUserContactDetails

      parameters:
        - name: X-Auth-Token
          in: header
          description: JWT for the client id
          required: true
          schema:
            type: string

      x-amazon-apigateway-request-validators:
        basic:
          validateRequestParameters: true

      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: POST
        uri: "arn:aws:apigateway:eu-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-2:216211142709:function:userContactDetailsMaintenanceTest/invocations"
        passThroughBehaviour: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        responses:
          default:
            statusCode: 200

      requestBody:
        required: true
        content: 
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: 'Mrs'
                firstname:
                  type: string
                  example: 'Vickie'
                lastname:
                  type: string
                  example: 'Ferguson'
                gender:
                  type: string
                  example: 'F'
                address1:
                  type: string
                  example: '10 Mount Herman Close'
                address2:
                  type: string
                  example: ''
                town:
                  type: string
                  example: 'Woking'
                county:
                  type: string
                  example: 'Surrey'
                postcode:
                  type: string
                  example: 'GU22 7AU'
                country:
                  type: string
                  example: 'United Kingdom'
                phone:
                  type: string
                  example: '01483 755899'
                mobile:
                  type: string
                  example: '07973 123456'
                domainName:
                  type: string
                  example: 'sharemytutoring.com'
                websiteName:
                  type: string
                  example: 'ShareMyTutoring'
                password:
                  type: string
                  example: 'mypassword'
      responses:
        '200':
          description: User contact details already exists.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg: 
                    type: string
                    example: "Account created"
        '201':
          description: User Contact Details created.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg: 
                    type: string
                    example: "Account created"
        '401':
          $ref: '#/components/responses/UserNotSignedIn'

        '422':
          description: User contact details validation issues.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorMsg: 
                    type: object
                    properties:
                      title:
                        type: string
                        example: 'Title is not a valid title.'
                      firstname:
                        type: string
                        example: 'First name must be less than 50 characters.'
                      lastname:
                        type: string
                        example: 'Last name must be less than 50 characters.'
                      gender:
                        type: string
                        example: 'Enter a valid gender ( M / F ).'
                      address1:
                        type: string
                        example: 'The first line of your address needs to entered.'
                      address2:
                        type: string
                        example: 'The address must be less than 80 characters.'
                      town:
                        type: string
                        example: 'Your town needs to entered.'
                      county:
                        type: string
                        example: 'The county must be at least 2 characters long.'
                      postcode:
                        type: string
                        example: 'Your postcode must be less than 11 characters.'
                      country:
                        type: string
                        example: 'You must enter a valid country.'
                      phone:
                        type: string
                        example: 'Your phone number must be less than 20 characters.'
                      mobile:
                        type: string
                        example: 'Your mobile must be less than 20 characters.'

        '500':
          $ref: '#/components/responses/SystemError'

        '503':
          $ref: '#/components/responses/DatabaseConnectivityIssue'

    put:
      summary: Updates the users contact details.
      description: Updates the users contact details.
      tags:
        - User Contact Details
      operationId: updateUserContactDetails
      
      parameters:
        - name: X-Auth-Token
          in: header
          description: JWT for the client id
          required: true
          schema:
            type: string

      x-amazon-apigateway-request-validators:
        basic:
          validateRequestParameters: true

      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: POST
        uri: "arn:aws:apigateway:eu-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-2:216211142709:function:userContactDetailsMaintenanceTest/invocations"
        passThroughBehaviour: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        responses:
          default:
            statusCode: 200

      requestBody:
        required: true
        content: 
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: 'Mrs'
                firstname:
                  type: string
                  example: 'Vickie'
                lastname:
                  type: string
                  example: 'Ferguson'
                gender:
                  type: string
                  example: 'F'
                address1:
                  type: string
                  example: '10 Mount Herman Close'
                address2:
                  type: string
                  example: ''
                town:
                  type: string
                  example: 'Woking'
                county:
                  type: string
                  example: 'Surrey'
                postcode:
                  type: string
                  example: 'GU22 7AU'
                country:
                  type: string
                  example: 'United Kingdom'
                phone:
                  type: string
                  example: '01483 755899'
                mobile:
                  type: string
                  example: '07973 123456'
      responses:
        '200':
          description: User contact details updated.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg: 
                    type: string
                    example: "Account created"
        '201':
          description: User contact details created.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg: 
                    type: string
                    example: "Account created"

        '422':
          description: User contact details validation issues.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorMsg: 
                    type: object
                    properties:
                      title:
                        type: string
                        example: 'Title is not a valid title.'
                      firstname:
                        type: string
                        example: 'First name must be less than 50 characters.'
                      lastname:
                        type: string
                        example: 'Last name must be less than 50 characters.'
                      gender:
                        type: string
                        example: 'Enter a valid gender ( M / F ).'
                      address1:
                        type: string
                        example: 'The first line of your address needs to entered.'
                      address2:
                        type: string
                        example: 'The address must be less than 80 characters.'
                      town:
                        type: string
                        example: 'Your town needs to entered.'
                      county:
                        type: string
                        example: 'The county must be at least 2 characters long.'
                      postcode:
                        type: string
                        example: 'Your postcode must be less than 11 characters.'
                      country:
                        type: string
                        example: 'You must enter a valid country.'
                      phone:
                        type: string
                        example: 'Your phone number must be less than 20 characters.'
                      mobile:
                        type: string
                        example: 'Your mobile must be less than 20 characters.'

        '500':
          $ref: '#/components/responses/SystemError'

        '503':
          $ref: '#/components/responses/DatabaseConnectivityIssue'

    get:
      summary: Retrieves the users contact details.
      description: Returns the users contact details.
      tags:
        - User Contact Details
      operationId: getUserContactDetails

      parameters:
        - name: X-Auth-Token
          in: header
          description: JWT for the client id
          required: true
          schema:
            type: string

      x-amazon-apigateway-request-validators:
        basic:
          validateRequestParameters: true

      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: POST
        uri: "arn:aws:apigateway:eu-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-2:216211142709:function:userContactDetailsMaintenanceTest/invocations"
        passThroughBehaviour: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        responses:
          default:
            statusCode: 200

      responses:
        '200':
          description: Successfully found and returned the user contact details.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  rows:
                    type: integer
                    example: 1
                  user:
                    type: array
                    items:
                      type: object
                      properties:
                        user_id:
                          type: integer
                          example: 3
                        title:
                          type: string
                          example: "Mr"
                        firstname:
                          type: string
                          example: "John"
                        lastname:
                          type: string
                          example: "Higgins"
                        gender:
                          type: string
                          example: "M"
                        location_id:
                          type: integer
                          example: 123650
                        address1:
                          type: string
                          example: "40 The High Street"
                        address2:
                          type: string
                          example: ""
                        town:
                          type: string
                          example: "Horsell"
                        county:
                          type: string
                          example: "Surrey"
                        postcode:
                          type: string
                          example: "GU21 5TF"
                        country_id:
                          type: integer
                          example: 238
                        phone:
                          type: string
                          example: "01483 755899"
                        mobile:
                          type: string
                          example: "07973 452378"

        '401':
          $ref: '#/components/responses/UserNotSignedIn'
        '404':
          $ref: '#/components/responses/UserAccountDoesNotExist'
        '500':
          $ref: '#/components/responses/SystemError'
        '503':
          $ref: '#/components/responses/DatabaseConnectivityIssue'

    delete:
      summary: Deletes the users contact details.
      description: Deletes the users contact details.
      tags:
        - User Contact Details
      operationId: deleteUserContactDetails

      parameters:
        - name: X-Auth-Token
          in: header
          description: JWT for the client id
          required: true
          schema:
            type: string

      x-amazon-apigateway-request-validators:
        basic:
          validateRequestParameters: true

      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: POST
        uri: "arn:aws:apigateway:eu-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-2:216211142709:function:userContactDetailsMaintenanceTest/invocations"
        passThroughBehaviour: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        responses:
          default:
            statusCode: 200

      responses:
        '201':
          description: User contact details deleted.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg: 
                    type: string
                    example: "User contact details deleted."
        '401':
          $ref: '#/components/responses/UserNotSignedIn'
        '404':
          $ref: '#/components/responses/UserAccountDoesNotExist'
        '500':
          $ref: '#/components/responses/SystemError'
        '503':
          $ref: '#/components/responses/DatabaseConnectivityIssue'

    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      tags:
      - User Contact Details
      responses:
        201:
          description: Default response for CORS method
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: string
            Access-Control-Allow-Methods:
              schema:
                type: string
            Access-Control-Allow-Headers:
              schema:
                type: string
          content: {}
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Headers: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Auth-Token'''
              method.response.header.Access-Control-Allow-Methods: '''*'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            responseTemplates:
              application/json: |
                {}

  /user-media-verify:
    summary: Verifies users email address or mobile phone
    description: Verifies the user owns the email address or mobile phone
    post:
      summary: Verifies email or mobile.
      description: Verifies the user owns the specified email or mobile phone.
      tags:
        - User Media Verification
      operationId: userMediaVerification

      x-amazon-apigateway-request-validators:
        basic:
          validateRequestParameters: true

      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: POST
        uri: "arn:aws:apigateway:eu-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-2:216211142709:function:userMediaVerificationTest/invocations"
        passThroughBehaviour: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        responses:
          default:
            statusCode: 200

      requestBody:
        required: true
        content: 
          application/json:
            schema:
              type: object
              properties:
                validationCode:
                  type: string
                  example: 'as43dsfs5243tsfdfdhsdfsfg'

      responses:
        '201':
          description: Users media verified
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg: 
                    type: string
                    example: "Email verified"
        '404':
          description: Validation issues.
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorMsg: 
                    type: object
                    properties:
                      validationCode:
                        type: string
                        example: Validation code error.
        '422':
          description: Validation issues.
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorMsg: 
                    type: object
                    properties:
                      validationCode:
                        type: string
                        example: Validation code error.
        '500':
          $ref: '#/components/responses/SystemError'
        '503':
          $ref: '#/components/responses/DatabaseConnectivityIssue'

  /user-password-reset:
    summary: Handles the reseting of users passwords when they can not log on.
    description: If a user forgets their password they can rquest a password reset email and reset their password, this route handles both.
    
    post:
      summary: Resets a users password if they have forgetten it.
      description: Resets a users password if they have forgetten it.
      tags:
        - User Reset Password
      operationId: resetPasswordNotLoggedIn

      requestBody:
        required: true
        content: 
          application/json:
            schema:
              type: object
              properties:
                resetCode:
                  type: string
                  example: '123456789'
                password:
                  type: string
                  example: 'Hello123!'
                password2:
                  type: string
                  example: 'Hello123!'
      responses:
        '201':
          description: Password successfully changed.
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg: 
                    type: string
                    example: "Password has been successfully changed."
        '404':
          description: Reset code does not exist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorMsg: 
                    type: object
                    properties:
                      resetCode:
                        type: string
                        example: Reset code does not exist.

        '422':
          description: User Password Reset Validation issues.
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorMsg: 
                    type: object
                    properties:
                      resetCode:
                        type: string
                        example: Reset code is invalid.
                      password: 
                        type: string
                        example: Your password needs to be 6 - 20 characters long and must contain at least one number.
                      password2:
                        type: string
                        example: Your passwords must match.
        '500':
          $ref: '#/components/responses/SystemError'

        '503':
          $ref: '#/components/responses/DatabaseConnectivityIssue'

      x-amazon-apigateway-request-validators:
        basic:
          validateRequestParameters: true

      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: POST
        uri: "arn:aws:apigateway:eu-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-2:216211142709:function:userPasswordResetTest/invocations"
        passThroughBehaviour: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        responses:
          default:
            statusCode: 200

    put:
      summary: Retrieves / creates details to send a password reset email.
      description: Retrieves / creates the details to send a password reset email.
      tags:
        - User Reset Password
      operationId: emailResetPasswordNotLoggedIn

      x-amazon-apigateway-request-validators:
        basic:
          validateRequestParameters: true

      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: PUT
        uri: "arn:aws:apigateway:eu-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-2:216211142709:function:userPasswordResetTest/invocations"
        passThroughBehaviour: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        responses:
          default:
            statusCode: 200

      requestBody:
        required: true
        content: 
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: 'MyUsername'

      responses:
        '200':
          description: Successfully sent reset password email.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  rows:
                    type: integer
                    example: 1
                  response:
                    type: object
                    properties:
                      user_id:
                        type: object
                        properties:
                          RequestId:
                            type: string
                            example: 'fe96b2d5-a98d-4533-aa01-ea88586cc299'
                        example: 3
                      MessageId:
                        type: string
                        example: '01000171eabf7bff-1a04a105-2d0e-4120-afc1-59fa9ac1f1ed-000000'

        '404':
          description: Username does not exist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorMsg: 
                    type: object
                    properties:
                      username:
                        type: string
                        example: Username does not exist.
        '500':
          $ref: '#/components/responses/SystemError'
        '503':
          $ref: '#/components/responses/DatabaseConnectivityIssue'

    options:

      summary: User Reset Password options.
      description: User reset password options.
      tags:
        - User Reset Password
      operationId: optionUserResetPassword

      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Auth-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"

  '/user-email-usernames/{email}':
    summary: Sends an email of all the usernames associated to an email address, to the email address.
    description: Sends an email of all the usernames associated to an email address, to the email address.
    
    get:
      summary: Sends an email to the email address showing all the usernames associated to the email
      description: Sends an email to the email address showing all the usernames associated to the email.
      tags:
        - User Email Usernames
      operationId: getUserEmailUsernames

      x-amazon-apigateway-request-validators:
        basic:
          validateRequestParameters: true

      x-amazon-apigateway-integration:
        type: "aws_proxy"
        httpMethod: GET
        uri: "arn:aws:apigateway:eu-west-2:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-2:216211142709:function:userEmailUsernamesTest/invocations"
        passThroughBehaviour: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        responses:
          default:
            statusCode: 200

      parameters:
        - name: email
          in: path
          description: Email address
          required: true
          schema:
            type: string

      responses:
        '200':
          description: Successfully sent usernames to email.
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    example: 'Email has been sent.'

        '404':
          $ref: '#/components/responses/UserAccountDoesNotExist'
        '422':
          description: User Email Username Validation issues.
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorMsg: 
                    type: object
                    properties:
                      username:
                        type: string
                        example: Username is invalid.
        '500':
          $ref: '#/components/responses/SystemError'
        '503':
          $ref: '#/components/responses/DatabaseConnectivityIssue'

    options:

      summary: User Email Usernames options.
      description: User Email Usernames options.
      tags:
        - User Email Usernames
      operationId: optionUser

      responses:
        200:
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Auth-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: "mock"


components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-Auth-Token

  responses:

    UserNotSignedIn:
      description: User is not signed in.
      headers:
        Access-Control-Allow-Origin:
          schema:
            type: "string"
      content:
        application/json:
          schema:
            type: object
            properties:
              errorMsg: 
                type: string
                example: "User is not signed in."

    UserAccountDoesNotExist:
      description: User account does not exist.
      headers:
        Access-Control-Allow-Origin:
          schema:
            type: "string"
      content:
        application/json:
          schema:
            type: object
            properties:
              errorMsg: 
                type: string
                example: "Requested user does not exist."

    StaticdataSubjectsDoesNotExist:
      description: Static Data - subjects do not exist.
      headers:
        Access-Control-Allow-Origin:
          schema:
            type: "string"
      content:
        application/json:
          schema:
            type: object
            properties:
              errorMsg: 
                type: string
                example: "Static Data - Subjects do not exist."

    SystemError:
      description: System error
      headers:
        Access-Control-Allow-Origin:
          schema:
            type: "string"
      content:
        application/json:
          schema:
            type: object
            properties:
              errorNo: 
                type: integer
                example: 1305
              sqlMessage:
                type: string
                example: 'PROCEDURE <database>.<procedure> does not exist'
              sqlState:
                type: string
                example: '42000'      

    DatabaseConnectivityIssue:
      description: Issue connecting to the database
      headers:
        Access-Control-Allow-Origin:
          schema:
            type: "string"
      content:
        application/json:
          schema:
            type: object
            properties:
              errorNo: 
                type: integer
                example: 1045
              sqlMessage:
                type: string
                example: Access to the databse is denied.
              sqlState:
                type: string
                example: '28000'

  schemas:
    Empty:
      title: "Empty Schema"
      type: "object"
      
